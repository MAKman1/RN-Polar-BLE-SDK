// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pftp_notification.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "google/GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class PbLocalDateTime;
@class PbPFtpTouchPosition;
@class PbPftpPnsDHAttribute;
@class PbPftpPnsHDAttribute;
GPB_ENUM_FWD_DECLARE(ButtonState);
GPB_ENUM_FWD_DECLARE(Buttons);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PbPFtpDevToHostNotification

/**
 *
 * Types for device to host notifications (SAGRFC53).
 * Device to host notification parameters, if any, are transmitted in the following
 * data (SAGRFC56) and defined below, individually per notification type.
 **/
typedef GPB_ENUM(PbPFtpDevToHostNotification) {
  /** (Not used currently for anything. Reserved for future use.) */
  PbPFtpDevToHostNotification_FilesystemModified = 0,

  /** Used to inform host about internal test data. */
  PbPFtpDevToHostNotification_InternalTestEvent = 1,

  /** Used to inform host when the device is ready to communicate again after reporting WAIT_FOR_IDLING error. */
  PbPFtpDevToHostNotification_Idling = 2,

  /** Used to inform host about device's battery status. */
  PbPFtpDevToHostNotification_BatteryStatus = 3,

  /** Used to inform host about user's inactivity. */
  PbPFtpDevToHostNotification_InactivityAlert = 4,

  /** Used to inform host about training session status. */
  PbPFtpDevToHostNotification_TrainingSessionStatus = 5,

  /** Used by device to request host to sync. This happens for example when user presses "Sync" button in the device. */
  PbPFtpDevToHostNotification_SyncRequired = 7,

  /** Used by device to inform result of START_AUTOSYNC synchronization. */
  PbPFtpDevToHostNotification_AutosyncStatus = 8,

  /** Used to send responses to Polar Notification Service notifications. */
  PbPFtpDevToHostNotification_PnsDhNotificationResponse = 9,

  /** Used for Polar Notification Service settings */
  PbPFtpDevToHostNotification_PnsSettings = 10,

  /** Used to request mobile device to start GPS measurement. Parameter PbPftpStartGPSMeasurement */
  PbPFtpDevToHostNotification_StartGpsMeasurement = 11,

  /** Used to request mobile device to stop GPS measurement. No parameters */
  PbPFtpDevToHostNotification_StopGpsMeasurement = 12,

  /** Used to keep mobile running in background. No parameters */
  PbPFtpDevToHostNotification_KeepBackgroundAlive = 13,

  /** Polar shell is to transfer any test related data from device to host */
  PbPFtpDevToHostNotification_PolarShellDhData = 14,
};

GPBEnumDescriptor *PbPFtpDevToHostNotification_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPFtpDevToHostNotification_IsValidValue(int32_t value);

#pragma mark - Enum Action

typedef GPB_ENUM(Action) {
  Action_Created = 0,
  Action_Updated = 1,
  Action_Removed = 2,
};

GPBEnumDescriptor *Action_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Action_IsValidValue(int32_t value);

#pragma mark - Enum PbPftpPnsDHAttributeType

typedef GPB_ENUM(PbPftpPnsDHAttributeType) {
  PbPftpPnsDHAttributeType_UnknownAction = 1,
  PbPftpPnsDHAttributeType_PositiveAction = 2,
  PbPftpPnsDHAttributeType_NegativeAction = 3,
  PbPftpPnsDHAttributeType_ClearAction = 4,
};

GPBEnumDescriptor *PbPftpPnsDHAttributeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPftpPnsDHAttributeType_IsValidValue(int32_t value);

#pragma mark - Enum PbPFtpHostToDevNotification

/**
 *
 * Types for host to device notifications (SAGRFC53).
 * Host to device notification parameters, if any, are transmitted in the following
 * data (SAGRFC56) and defined below, individually per notification type.
 **/
typedef GPB_ENUM(PbPFtpHostToDevNotification) {
  /** Instructs device to show syncing animation */
  PbPFtpHostToDevNotification_StartSync = 0,

  /** Instructs device to hide syncing animation */
  PbPFtpHostToDevNotification_StopSync = 1,
  PbPFtpHostToDevNotification_Reset = 2,
  PbPFtpHostToDevNotification_LockProductionData = 3,

  /**
   * Sync terminate notification overrides start and stop sync sequency.
   * Device is forced to ignore and terminate running synchonization.
   **/
  PbPFtpHostToDevNotification_TerminateSync = 4,

  /** keep alive, mainly for wireless connection to maintain link. */
  PbPFtpHostToDevNotification_KeepAlive = 5,

  /** Command the device to perform autosync if the device is able to automatically sync to a web service for instance. */
  PbPFtpHostToDevNotification_StartAutosync = 6,
  PbPFtpHostToDevNotification_PnsHdNotification = 7,

  /** Instructs the device to initialize connection, if necessary. */
  PbPFtpHostToDevNotification_InitializeSession = 8,

  /** Instructs the device to terminate connection, if possible. */
  PbPFtpHostToDevNotification_TerminateSession = 9,

  /** Instruct the device to simulate button press */
  PbPFtpHostToDevNotification_SimulateButtonPress = 10,

  /** Instruct the device to simulate touch screen */
  PbPFtpHostToDevNotification_SimulateTouchScreen = 11,

  /** Instructs the device to start sync session, if possible */
  PbPFtpHostToDevNotification_RequestSync = 12,

  /** Notify the device that a new firmware is available */
  PbPFtpHostToDevNotification_FirmwareUpdateAvailable = 13,

  /** GPS data for device when using mobile as GPS sensor */
  PbPFtpHostToDevNotification_GpsData = 14,

  /** Indication of lost GPS signal for device when using mobile as GPS sensor */
  PbPFtpHostToDevNotification_GpsLost = 15,

  /** User has not given permission to use mobile's GPS sensor */
  PbPFtpHostToDevNotification_GpsNoPermission = 16,

  /** Polar shell is to transfer any test related data from host to device */
  PbPFtpHostToDevNotification_PolarShellHdData = 17,
};

GPBEnumDescriptor *PbPFtpHostToDevNotification_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPFtpHostToDevNotification_IsValidValue(int32_t value);

#pragma mark - Enum PbPftpPnsHDCategoryID

typedef GPB_ENUM(PbPftpPnsHDCategoryID) {
  PbPftpPnsHDCategoryID_CategoryIdOther = 0,
  PbPftpPnsHDCategoryID_CategoryIdPolar = 1,
  PbPftpPnsHDCategoryID_CategoryIdIncomingcall = 2,
  PbPftpPnsHDCategoryID_CategoryIdMissedcall = 3,
  PbPftpPnsHDCategoryID_CategoryIdVoicemail = 4,
  PbPftpPnsHDCategoryID_CategoryIdSocial = 5,
  PbPftpPnsHDCategoryID_CategoryIdSchedule = 6,
  PbPftpPnsHDCategoryID_CategoryIdEmail = 7,
  PbPftpPnsHDCategoryID_CategoryIdNews = 8,
  PbPftpPnsHDCategoryID_CategoryIdHealthandfitness = 9,
  PbPftpPnsHDCategoryID_CategoryIdBusinessandfinance = 10,
  PbPftpPnsHDCategoryID_CategoryIdLocation = 11,
  PbPftpPnsHDCategoryID_CategoryIdEntertainment = 12,

  /** Alarm or timer. */
  PbPftpPnsHDCategoryID_CategoryIdAlarm = 13,

  /** Promotion or advertisement. */
  PbPftpPnsHDCategoryID_CategoryIdPromo = 14,

  /** A specific, timely recommendation for a single thing. */
  PbPftpPnsHDCategoryID_CategoryIdRecommendation = 15,

  /** Ongoing information about device or contextual status. */
  PbPftpPnsHDCategoryID_CategoryIdStatus = 16,

  /** Media transport control for playback. */
  PbPftpPnsHDCategoryID_CategoryIdTransport = 17,
};

GPBEnumDescriptor *PbPftpPnsHDCategoryID_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPftpPnsHDCategoryID_IsValidValue(int32_t value);

#pragma mark - Enum PbPftpPnsHDAttributeType

/** Host to device attribute type */
typedef GPB_ENUM(PbPftpPnsHDAttributeType) {
  PbPftpPnsHDAttributeType_Title = 0,
  PbPftpPnsHDAttributeType_Subtitle = 1,
  PbPftpPnsHDAttributeType_Message = 2,
  PbPftpPnsHDAttributeType_PositiveActionLabel = 3,
  PbPftpPnsHDAttributeType_NegativeActionLabel = 4,
  PbPftpPnsHDAttributeType_ApplicationName = 5,
  PbPftpPnsHDAttributeType_ClearActionLabel = 6,
};

GPBEnumDescriptor *PbPftpPnsHDAttributeType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPftpPnsHDAttributeType_IsValidValue(int32_t value);

#pragma mark - Enum PbPFtpSimulateTouchScreenParams_PbPFtpTouchState

typedef GPB_ENUM(PbPFtpSimulateTouchScreenParams_PbPFtpTouchState) {
  /** touch started */
  PbPFtpSimulateTouchScreenParams_PbPFtpTouchState_TouchStateStart = 0,

  /** touch position update */
  PbPFtpSimulateTouchScreenParams_PbPFtpTouchState_TouchStatePosition = 1,

  /** touch ended */
  PbPFtpSimulateTouchScreenParams_PbPFtpTouchState_TouchStateEnd = 2,
};

GPBEnumDescriptor *PbPFtpSimulateTouchScreenParams_PbPFtpTouchState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbPFtpSimulateTouchScreenParams_PbPFtpTouchState_IsValidValue(int32_t value);

#pragma mark - PftpNotificationRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface PftpNotificationRoot : GPBRootObject
@end

#pragma mark - PbPFtpFilesystemModifiedParams

typedef GPB_ENUM(PbPFtpFilesystemModifiedParams_FieldNumber) {
  PbPFtpFilesystemModifiedParams_FieldNumber_Action = 1,
  PbPFtpFilesystemModifiedParams_FieldNumber_Path = 2,
};

@interface PbPFtpFilesystemModifiedParams : GPBMessage

/** Taken action on a file or directory. */
@property(nonatomic, readwrite) Action action;

@property(nonatomic, readwrite) BOOL hasAction;
/** Path to the file or directory. Ending directory delimiter designates directory. Otherwise the path is considered to refer to a file. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *path;
/** Test to see if @c path has been set. */
@property(nonatomic, readwrite) BOOL hasPath;

@end

#pragma mark - PbPFtpInactivityAlert

typedef GPB_ENUM(PbPFtpInactivityAlert_FieldNumber) {
  PbPFtpInactivityAlert_FieldNumber_Countdown = 1,
};

/**
 *
 * Parameters for INACTIVITY_ALERT device to host notification.
 **/
@interface PbPFtpInactivityAlert : GPBMessage

/** Countdown to inactivity alert in minutes. 0 means that the alert has been triggered. >0 means pre-alert notification. */
@property(nonatomic, readwrite) uint32_t countdown;

@property(nonatomic, readwrite) BOOL hasCountdown;
@end

#pragma mark - PbPFtpTrainingSessionStatus

typedef GPB_ENUM(PbPFtpTrainingSessionStatus_FieldNumber) {
  PbPFtpTrainingSessionStatus_FieldNumber_Inprogress = 1,
};

/**
 *
 * Parameters for TRAINING_SESSION_STATUS device to host notification.
 **/
@interface PbPFtpTrainingSessionStatus : GPBMessage

/** If true, training session is inprogress or was started. False, when training session ended. */
@property(nonatomic, readwrite) BOOL inprogress;

@property(nonatomic, readwrite) BOOL hasInprogress;
@end

#pragma mark - PbPFtpAutoSyncStatusParams

typedef GPB_ENUM(PbPFtpAutoSyncStatusParams_FieldNumber) {
  PbPFtpAutoSyncStatusParams_FieldNumber_Succeeded = 1,
  PbPFtpAutoSyncStatusParams_FieldNumber_Description_p = 2,
};

/**
 *
 * Parameters for AUTOSYNC_STATUS device to host notification.
 **/
@interface PbPFtpAutoSyncStatusParams : GPBMessage

/** If true, autosync completed successfully. False, if the synchronization failed. */
@property(nonatomic, readwrite) BOOL succeeded;

@property(nonatomic, readwrite) BOOL hasSucceeded;
/** description of the failed synchronization, TODO define these. One example is timeout. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;
/** Test to see if @c description_p has been set. */
@property(nonatomic, readwrite) BOOL hasDescription_p;

@end

#pragma mark - PbPFtpPolarShellMessageParams

typedef GPB_ENUM(PbPFtpPolarShellMessageParams_FieldNumber) {
  PbPFtpPolarShellMessageParams_FieldNumber_PolarShellMsgId = 1,
  PbPFtpPolarShellMessageParams_FieldNumber_Data_p = 2,
};

/**
 *
 * Parameters for Polar shell device to host notification
 **/
@interface PbPFtpPolarShellMessageParams : GPBMessage

/** polar shell message id */
@property(nonatomic, readwrite) uint32_t polarShellMsgId;

@property(nonatomic, readwrite) BOOL hasPolarShellMsgId;
/** optional data for the notification */
@property(nonatomic, readwrite, copy, null_resettable) NSString *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - PbPftpPnsDHAttribute

typedef GPB_ENUM(PbPftpPnsDHAttribute_FieldNumber) {
  PbPftpPnsDHAttribute_FieldNumber_Type = 1,
};

@interface PbPftpPnsDHAttribute : GPBMessage

@property(nonatomic, readwrite) PbPftpPnsDHAttributeType type;

@property(nonatomic, readwrite) BOOL hasType;
@end

#pragma mark - PbPftpPnsDHNotificationResponse

typedef GPB_ENUM(PbPftpPnsDHNotificationResponse_FieldNumber) {
  PbPftpPnsDHNotificationResponse_FieldNumber_NotificationId = 1,
  PbPftpPnsDHNotificationResponse_FieldNumber_AttributesArray = 2,
};

@interface PbPftpPnsDHNotificationResponse : GPBMessage

@property(nonatomic, readwrite) uint32_t notificationId;

@property(nonatomic, readwrite) BOOL hasNotificationId;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbPftpPnsDHAttribute*> *attributesArray;
/** The number of items in @c attributesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attributesArray_Count;

@end

#pragma mark - PbPftpPnsState

typedef GPB_ENUM(PbPftpPnsState_FieldNumber) {
  PbPftpPnsState_FieldNumber_NotificationsEnabled = 1,
  PbPftpPnsState_FieldNumber_PreviewEnabled = 2,
};

@interface PbPftpPnsState : GPBMessage

@property(nonatomic, readwrite) BOOL notificationsEnabled;

@property(nonatomic, readwrite) BOOL hasNotificationsEnabled;
/** False if not available */
@property(nonatomic, readwrite) BOOL previewEnabled;

@property(nonatomic, readwrite) BOOL hasPreviewEnabled;
@end

#pragma mark - PbPftpStartGPSMeasurement

typedef GPB_ENUM(PbPftpStartGPSMeasurement_FieldNumber) {
  PbPftpStartGPSMeasurement_FieldNumber_MinimumInterval = 1,
  PbPftpStartGPSMeasurement_FieldNumber_Accuracy = 2,
  PbPftpStartGPSMeasurement_FieldNumber_Latitude = 3,
  PbPftpStartGPSMeasurement_FieldNumber_Longitude = 4,
};

@interface PbPftpStartGPSMeasurement : GPBMessage

/** Minimum GPS data notification sending interval in milliseconds */
@property(nonatomic, readwrite) uint32_t minimumInterval;

@property(nonatomic, readwrite) BOOL hasMinimumInterval;
/** Needed distance increment in meters for sending GPS data notification */
@property(nonatomic, readwrite) uint32_t accuracy;

@property(nonatomic, readwrite) BOOL hasAccuracy;
/**
 * latitude (in degrees) of location to start distance cumulation. Leave empty if start location is next availalbe gps location.
 * value is positive on northern hemisphere
 **/
@property(nonatomic, readwrite) double latitude;

@property(nonatomic, readwrite) BOOL hasLatitude;
/**
 * Longitude (in degrees) of location to start distance cumulation. Leave empty if start location is next availalbe gps location.
 * value is positive on northern hemisphere
 **/
@property(nonatomic, readwrite) double longitude;

@property(nonatomic, readwrite) BOOL hasLongitude;
@end

#pragma mark - PbInitializeSessionParams

typedef GPB_ENUM(PbInitializeSessionParams_FieldNumber) {
  PbInitializeSessionParams_FieldNumber_UsesAttributeLevelResponse = 1,
};

/**
 *
 * Parameters for INITIALIZE_SESSION host to device notification.
 **/
@interface PbInitializeSessionParams : GPBMessage

/** host may give information wheather it uses att level reponse packets from host to device */
@property(nonatomic, readwrite) BOOL usesAttributeLevelResponse;

@property(nonatomic, readwrite) BOOL hasUsesAttributeLevelResponse;
@end

#pragma mark - PbFirmwareUpdateAvailableParams

typedef GPB_ENUM(PbFirmwareUpdateAvailableParams_FieldNumber) {
  PbFirmwareUpdateAvailableParams_FieldNumber_Mandatory = 1,
};

/**
 *
 * Parameters for FIRMWARE_UPDATE_AVAILABLE host to device notification.
 **/
@interface PbFirmwareUpdateAvailableParams : GPBMessage

/** Is update mandatory or not */
@property(nonatomic, readwrite) BOOL mandatory;

@property(nonatomic, readwrite) BOOL hasMandatory;
@end

#pragma mark - PbPFtpSimulateButtonPressParams

typedef GPB_ENUM(PbPFtpSimulateButtonPressParams_FieldNumber) {
  PbPFtpSimulateButtonPressParams_FieldNumber_Button = 1,
  PbPFtpSimulateButtonPressParams_FieldNumber_State = 2,
};

/**
 *
 * Parameters for SIMULATE_BUTTON_PRESS host to device notification.
 **/
@interface PbPFtpSimulateButtonPressParams : GPBMessage

/** Defines the button to change state */
@property(nonatomic, readwrite) enum Buttons button;

@property(nonatomic, readwrite) BOOL hasButton;
/** Defines the new state of button */
@property(nonatomic, readwrite) enum ButtonState state;

@property(nonatomic, readwrite) BOOL hasState;
@end

#pragma mark - PbPFtpTouchPosition

typedef GPB_ENUM(PbPFtpTouchPosition_FieldNumber) {
  PbPFtpTouchPosition_FieldNumber_Pos = 1,
  PbPFtpTouchPosition_FieldNumber_MaxPos = 2,
};

@interface PbPFtpTouchPosition : GPBMessage

/** pixel coordinate if max_pos is not available, otherwise proportional position on display */
@property(nonatomic, readwrite) uint32_t pos;

@property(nonatomic, readwrite) BOOL hasPos;
/** maximum position value */
@property(nonatomic, readwrite) uint32_t maxPos;

@property(nonatomic, readwrite) BOOL hasMaxPos;
@end

#pragma mark - PbPFtpSimulateTouchScreenParams

typedef GPB_ENUM(PbPFtpSimulateTouchScreenParams_FieldNumber) {
  PbPFtpSimulateTouchScreenParams_FieldNumber_State = 1,
  PbPFtpSimulateTouchScreenParams_FieldNumber_XPos = 2,
  PbPFtpSimulateTouchScreenParams_FieldNumber_YPos = 3,
};

/**
 *
 * Parameters for SIMULATE_TOUCH_SCREEN host to device notification.
 **/
@interface PbPFtpSimulateTouchScreenParams : GPBMessage

@property(nonatomic, readwrite) PbPFtpSimulateTouchScreenParams_PbPFtpTouchState state;

@property(nonatomic, readwrite) BOOL hasState;
/** horizontal touch position, available only if touch state is TOUCH_STATE_START or TOUCH_STATE_POSITION */
@property(nonatomic, readwrite, strong, null_resettable) PbPFtpTouchPosition *xPos;
/** Test to see if @c xPos has been set. */
@property(nonatomic, readwrite) BOOL hasXPos;

/** vertical touch position, available only if touch state is TOUCH_STATE_START or TOUCH_STATE_POSITION */
@property(nonatomic, readwrite, strong, null_resettable) PbPFtpTouchPosition *yPos;
/** Test to see if @c yPos has been set. */
@property(nonatomic, readwrite) BOOL hasYPos;

@end

#pragma mark - PbPFtpStopSyncParams

typedef GPB_ENUM(PbPFtpStopSyncParams_FieldNumber) {
  PbPFtpStopSyncParams_FieldNumber_Completed = 1,
  PbPFtpStopSyncParams_FieldNumber_Description_p = 2,
};

/**
 *
 * Parameters for STOP_SYNC host to device notification.
 **/
@interface PbPFtpStopSyncParams : GPBMessage

/** True if the host considers the synchronization completed, or false if the synchronization was interrupted. */
@property(nonatomic, readwrite) BOOL completed;

@property(nonatomic, readwrite) BOOL hasCompleted;
/** description of the failed synchronization */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;
/** Test to see if @c description_p has been set. */
@property(nonatomic, readwrite) BOOL hasDescription_p;

@end

#pragma mark - PbPFtpFactoryResetParams

typedef GPB_ENUM(PbPFtpFactoryResetParams_FieldNumber) {
  PbPFtpFactoryResetParams_FieldNumber_Sleep = 1,
  PbPFtpFactoryResetParams_FieldNumber_DoFactoryDefaults = 2,
  PbPFtpFactoryResetParams_FieldNumber_OtaFwupdate = 3,
};

/**
 *
 * Parameters for RESET host to device notification.
 **/
@interface PbPFtpFactoryResetParams : GPBMessage

/** If true the device should go to sleep (shelf mode) after the factory reset. */
@property(nonatomic, readwrite) BOOL sleep;

@property(nonatomic, readwrite) BOOL hasSleep;
@property(nonatomic, readwrite) BOOL doFactoryDefaults;

@property(nonatomic, readwrite) BOOL hasDoFactoryDefaults;
/**
 * bool ota_fwupdate added to be used during firmware update over ble.
 * for example on Archer, if do_factory_defaults is true and ota_update true, training computer does factory defaults, but
 * preserves bluetooth pairing info, and establishes the ble connection automatically after reset(long Back-button functionality)
 * without showing user the "Choose language" -dialog.
 **/
@property(nonatomic, readwrite) BOOL otaFwupdate;

@property(nonatomic, readwrite) BOOL hasOtaFwupdate;
@end

#pragma mark - PbPFtpStartAutosyncParams

typedef GPB_ENUM(PbPFtpStartAutosyncParams_FieldNumber) {
  PbPFtpStartAutosyncParams_FieldNumber_Timeout = 1,
};

/**
 *
 * Parameters for START_AUTOSYNC host to device notification.
 **/
@interface PbPFtpStartAutosyncParams : GPBMessage

/** device will try connection for time defined in timeout */
@property(nonatomic, readwrite) uint32_t timeout;

@property(nonatomic, readwrite) BOOL hasTimeout;
@end

#pragma mark - PbPftpPnsHDAttribute

typedef GPB_ENUM(PbPftpPnsHDAttribute_FieldNumber) {
  PbPftpPnsHDAttribute_FieldNumber_Type = 1,
  PbPftpPnsHDAttribute_FieldNumber_Data_p = 2,
  PbPftpPnsHDAttribute_FieldNumber_AttributeFullSize = 3,
};

/**
 * Host to device notification attribute
 **/
@interface PbPftpPnsHDAttribute : GPBMessage

@property(nonatomic, readwrite) PbPftpPnsHDAttributeType type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readwrite, copy, null_resettable) NSString *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/**
 *
 * Used to send total length of attribute data.
 * Eg when we receive just part of email this is used to store total length of mail.
 **/
@property(nonatomic, readwrite) uint32_t attributeFullSize;

@property(nonatomic, readwrite) BOOL hasAttributeFullSize;
@end

#pragma mark - PbPftpPnsHDNotification

typedef GPB_ENUM(PbPftpPnsHDNotification_FieldNumber) {
  PbPftpPnsHDNotification_FieldNumber_NotificationId = 1,
  PbPftpPnsHDNotification_FieldNumber_CategoryId = 2,
  PbPftpPnsHDNotification_FieldNumber_Action = 3,
  PbPftpPnsHDNotification_FieldNumber_IssueTime = 4,
  PbPftpPnsHDNotification_FieldNumber_NewSameCategoryNotifications = 5,
  PbPftpPnsHDNotification_FieldNumber_UnreadSameCategoryNotifications = 6,
  PbPftpPnsHDNotification_FieldNumber_AttributesArray = 7,
};

@interface PbPftpPnsHDNotification : GPBMessage

@property(nonatomic, readwrite) uint32_t notificationId;

@property(nonatomic, readwrite) BOOL hasNotificationId;
@property(nonatomic, readwrite) PbPftpPnsHDCategoryID categoryId;

@property(nonatomic, readwrite) BOOL hasCategoryId;
@property(nonatomic, readwrite) Action action;

@property(nonatomic, readwrite) BOOL hasAction;
@property(nonatomic, readwrite, strong, null_resettable) PbLocalDateTime *issueTime;
/** Test to see if @c issueTime has been set. */
@property(nonatomic, readwrite) BOOL hasIssueTime;

@property(nonatomic, readwrite) uint32_t newSameCategoryNotifications;

@property(nonatomic, readwrite) BOOL hasNewSameCategoryNotifications;
@property(nonatomic, readwrite) uint32_t unreadSameCategoryNotifications;

@property(nonatomic, readwrite) BOOL hasUnreadSameCategoryNotifications;
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbPftpPnsHDAttribute*> *attributesArray;
/** The number of items in @c attributesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attributesArray_Count;

@end

#pragma mark - PbPFtpGPSDataParams

typedef GPB_ENUM(PbPFtpGPSDataParams_FieldNumber) {
  PbPFtpGPSDataParams_FieldNumber_Latitude = 1,
  PbPFtpGPSDataParams_FieldNumber_Longitude = 2,
  PbPFtpGPSDataParams_FieldNumber_Speed = 3,
  PbPFtpGPSDataParams_FieldNumber_Distance = 4,
  PbPFtpGPSDataParams_FieldNumber_Altitude = 5,
  PbPFtpGPSDataParams_FieldNumber_SatelliteAmount = 6,
  PbPFtpGPSDataParams_FieldNumber_TimeOffset = 7,
};

/**
 *
 * Parameters for GPS_DATA host to device notification.
 **/
@interface PbPFtpGPSDataParams : GPBMessage

/** latitude in degrees, value is positive on northern hemisphere */
@property(nonatomic, readwrite) double latitude;

@property(nonatomic, readwrite) BOOL hasLatitude;
/** longitude in degrees, value is positive on eastern hemisphere */
@property(nonatomic, readwrite) double longitude;

@property(nonatomic, readwrite) BOOL hasLongitude;
@property(nonatomic, readwrite) float speed;

@property(nonatomic, readwrite) BOOL hasSpeed;
/** total distance since receiving of START_GPS_MEASUREMENT message */
@property(nonatomic, readwrite) float distance;

@property(nonatomic, readwrite) BOOL hasDistance;
@property(nonatomic, readwrite) float altitude;

@property(nonatomic, readwrite) BOOL hasAltitude;
/** number of satellites */
@property(nonatomic, readwrite) uint32_t satelliteAmount;

@property(nonatomic, readwrite) BOOL hasSatelliteAmount;
/**
 * Time offset in relation to start time of GPS measurement
 * range [0 - 359999999] (ms), i.e. 00:00:00.000 - 99:59:59.999
 **/
@property(nonatomic, readwrite) uint32_t timeOffset;

@property(nonatomic, readwrite) BOOL hasTimeOffset;
@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
