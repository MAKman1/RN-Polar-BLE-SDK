// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pftp_request.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PftpRequest.pbobjc.h"
 #import "Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PftpRequestRoot

@implementation PftpRequestRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[TypesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - PftpRequestRoot_FileDescriptor

static GPBFileDescriptor *PftpRequestRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum PbPFtpQuery

GPBEnumDescriptor *PbPFtpQuery_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "IdentifyDevice\000SetSystemTime\000GetSystemTi"
        "me\000SetLocalTime\000GetLocalTime\000GetDiskSpac"
        "e\000GenerateChallengeToken\000SetInternalTest"
        "\000GetBatteryStatus\000SetAdbMode\000CleanupDisk"
        "Space\000GetInactivityPreAlert\000PrepareFirmw"
        "areUpdate\000RequestSynchronization\000Request"
        "StartRecording\000RequestStopRecording\000Requ"
        "estRecordingStatus\000";
    static const int32_t values[] = {
        PbPFtpQuery_IdentifyDevice,
        PbPFtpQuery_SetSystemTime,
        PbPFtpQuery_GetSystemTime,
        PbPFtpQuery_SetLocalTime,
        PbPFtpQuery_GetLocalTime,
        PbPFtpQuery_GetDiskSpace,
        PbPFtpQuery_GenerateChallengeToken,
        PbPFtpQuery_SetInternalTest,
        PbPFtpQuery_GetBatteryStatus,
        PbPFtpQuery_SetAdbMode,
        PbPFtpQuery_CleanupDiskSpace,
        PbPFtpQuery_GetInactivityPreAlert,
        PbPFtpQuery_PrepareFirmwareUpdate,
        PbPFtpQuery_RequestSynchronization,
        PbPFtpQuery_RequestStartRecording,
        PbPFtpQuery_RequestStopRecording,
        PbPFtpQuery_RequestRecordingStatus,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PbPFtpQuery)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PbPFtpQuery_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PbPFtpQuery_IsValidValue(int32_t value__) {
  switch (value__) {
    case PbPFtpQuery_IdentifyDevice:
    case PbPFtpQuery_SetSystemTime:
    case PbPFtpQuery_GetSystemTime:
    case PbPFtpQuery_SetLocalTime:
    case PbPFtpQuery_GetLocalTime:
    case PbPFtpQuery_GetDiskSpace:
    case PbPFtpQuery_GenerateChallengeToken:
    case PbPFtpQuery_SetInternalTest:
    case PbPFtpQuery_GetBatteryStatus:
    case PbPFtpQuery_SetAdbMode:
    case PbPFtpQuery_CleanupDiskSpace:
    case PbPFtpQuery_GetInactivityPreAlert:
    case PbPFtpQuery_PrepareFirmwareUpdate:
    case PbPFtpQuery_RequestSynchronization:
    case PbPFtpQuery_RequestStartRecording:
    case PbPFtpQuery_RequestStopRecording:
    case PbPFtpQuery_RequestRecordingStatus:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PbPFtpOperation

@implementation PbPFtpOperation

@dynamic hasCommand, command;
@dynamic hasPath, path;

typedef struct PbPFtpOperation__storage_ {
  uint32_t _has_storage_[1];
  PbPFtpOperation_Command command;
  NSString *path;
} PbPFtpOperation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = PbPFtpOperation_Command_EnumDescriptor,
        .number = PbPFtpOperation_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpOperation__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpOperation_FieldNumber_Path,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PbPFtpOperation__storage_, path),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpOperation class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpOperation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum PbPFtpOperation_Command

GPBEnumDescriptor *PbPFtpOperation_Command_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Get\000Put\000Merge\000Remove\000";
    static const int32_t values[] = {
        PbPFtpOperation_Command_Get,
        PbPFtpOperation_Command_Put,
        PbPFtpOperation_Command_Merge,
        PbPFtpOperation_Command_Remove,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PbPFtpOperation_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PbPFtpOperation_Command_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PbPFtpOperation_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case PbPFtpOperation_Command_Get:
    case PbPFtpOperation_Command_Put:
    case PbPFtpOperation_Command_Merge:
    case PbPFtpOperation_Command_Remove:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PbPFtpSetSystemTimeParams

@implementation PbPFtpSetSystemTimeParams

@dynamic hasDate, date;
@dynamic hasTime, time;
@dynamic hasTrusted, trusted;

typedef struct PbPFtpSetSystemTimeParams__storage_ {
  uint32_t _has_storage_[1];
  PbDate *date;
  PbTime *time;
} PbPFtpSetSystemTimeParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(PbDate),
        .number = PbPFtpSetSystemTimeParams_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpSetSystemTimeParams__storage_, date),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = GPBStringifySymbol(PbTime),
        .number = PbPFtpSetSystemTimeParams_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PbPFtpSetSystemTimeParams__storage_, time),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trusted",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpSetSystemTimeParams_FieldNumber_Trusted,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpSetSystemTimeParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpSetSystemTimeParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PbPFtpRequestStartRecordingParams

@implementation PbPFtpRequestStartRecordingParams

@dynamic hasSampleType, sampleType;
@dynamic hasRecordingInterval, recordingInterval;
@dynamic hasSampleDataIdentifier, sampleDataIdentifier;

typedef struct PbPFtpRequestStartRecordingParams__storage_ {
  uint32_t _has_storage_[1];
  PbSampleType sampleType;
  PbDuration *recordingInterval;
  NSString *sampleDataIdentifier;
} PbPFtpRequestStartRecordingParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleType",
        .dataTypeSpecific.enumDescFunc = PbSampleType_EnumDescriptor,
        .number = PbPFtpRequestStartRecordingParams_FieldNumber_SampleType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpRequestStartRecordingParams__storage_, sampleType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "recordingInterval",
        .dataTypeSpecific.className = GPBStringifySymbol(PbDuration),
        .number = PbPFtpRequestStartRecordingParams_FieldNumber_RecordingInterval,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PbPFtpRequestStartRecordingParams__storage_, recordingInterval),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sampleDataIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpRequestStartRecordingParams_FieldNumber_SampleDataIdentifier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PbPFtpRequestStartRecordingParams__storage_, sampleDataIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpRequestStartRecordingParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpRequestStartRecordingParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PbPFtpSetLocalTimeParams

@implementation PbPFtpSetLocalTimeParams

@dynamic hasDate, date;
@dynamic hasTime, time;
@dynamic hasTzOffset, tzOffset;

typedef struct PbPFtpSetLocalTimeParams__storage_ {
  uint32_t _has_storage_[1];
  int32_t tzOffset;
  PbDate *date;
  PbTime *time;
} PbPFtpSetLocalTimeParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(PbDate),
        .number = PbPFtpSetLocalTimeParams_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpSetLocalTimeParams__storage_, date),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = GPBStringifySymbol(PbTime),
        .number = PbPFtpSetLocalTimeParams_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PbPFtpSetLocalTimeParams__storage_, time),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tzOffset",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpSetLocalTimeParams_FieldNumber_TzOffset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PbPFtpSetLocalTimeParams__storage_, tzOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpSetLocalTimeParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpSetLocalTimeParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PbPFtpGenerateChallengeTokenParams

@implementation PbPFtpGenerateChallengeTokenParams

@dynamic hasUserId, userId;
@dynamic hasNonse, nonse;

typedef struct PbPFtpGenerateChallengeTokenParams__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSData *nonse;
} PbPFtpGenerateChallengeTokenParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpGenerateChallengeTokenParams_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpGenerateChallengeTokenParams__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "nonse",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpGenerateChallengeTokenParams_FieldNumber_Nonse,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PbPFtpGenerateChallengeTokenParams__storage_, nonse),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpGenerateChallengeTokenParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpGenerateChallengeTokenParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PbPFtpSetAdbModeParams

@implementation PbPFtpSetAdbModeParams

@dynamic hasEnable, enable;

typedef struct PbPFtpSetAdbModeParams__storage_ {
  uint32_t _has_storage_[1];
} PbPFtpSetAdbModeParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enable",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpSetAdbModeParams_FieldNumber_Enable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpSetAdbModeParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpSetAdbModeParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PbPFtpCleanupDiskSpaceParams

@implementation PbPFtpCleanupDiskSpaceParams

@dynamic hasRequiredBytes, requiredBytes;

typedef struct PbPFtpCleanupDiskSpaceParams__storage_ {
  uint32_t _has_storage_[1];
  uint64_t requiredBytes;
} PbPFtpCleanupDiskSpaceParams__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requiredBytes",
        .dataTypeSpecific.className = NULL,
        .number = PbPFtpCleanupDiskSpaceParams_FieldNumber_RequiredBytes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PbPFtpCleanupDiskSpaceParams__storage_, requiredBytes),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PbPFtpCleanupDiskSpaceParams class]
                                     rootClass:[PftpRequestRoot class]
                                          file:PftpRequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PbPFtpCleanupDiskSpaceParams__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
