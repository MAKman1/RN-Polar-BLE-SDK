// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structures.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "google/GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class PbBleCharacteristic;
@class PbBleUuid;
@class PbDuration;
@class PbHeartRateZone;
@class PbPowerZone;
@class PbSourceDevice;
@class PbSpeedZone;
@class PbStravaSegmentTargets;
@class PbSystemDateTime;
@class PbVersion;
GPB_ENUM_FWD_DECLARE(PbHeartRateZoneSettingSource);
GPB_ENUM_FWD_DECLARE(PbMacType);
GPB_ENUM_FWD_DECLARE(PbPowerZoneSettingSource);
GPB_ENUM_FWD_DECLARE(PbSpeedZoneSettingSource);
GPB_ENUM_FWD_DECLARE(PbSwimmingPoolUnits);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum PbVolumeTarget_PbVolymeTargetType

typedef GPB_ENUM(PbVolumeTarget_PbVolymeTargetType) {
  PbVolumeTarget_PbVolymeTargetType_VolumeTargetTypeDuration = 0,
  PbVolumeTarget_PbVolymeTargetType_VolumeTargetTypeDistance = 1,
  PbVolumeTarget_PbVolymeTargetType_VolumeTargetTypeCalories = 2,
};

GPBEnumDescriptor *PbVolumeTarget_PbVolymeTargetType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbVolumeTarget_PbVolymeTargetType_IsValidValue(int32_t value);

#pragma mark - Enum PbStravaSegmentTarget_PbStravaSegmentType

typedef GPB_ENUM(PbStravaSegmentTarget_PbStravaSegmentType) {
  PbStravaSegmentTarget_PbStravaSegmentType_StravaSegmentTypeRide = 1,
  PbStravaSegmentTarget_PbStravaSegmentType_StravaSegmentTypeRun = 2,
};

GPBEnumDescriptor *PbStravaSegmentTarget_PbStravaSegmentType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PbStravaSegmentTarget_PbStravaSegmentType_IsValidValue(int32_t value);

#pragma mark - StructuresRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface StructuresRoot : GPBRootObject
@end

#pragma mark - PbVolumeTarget

typedef GPB_ENUM(PbVolumeTarget_FieldNumber) {
  PbVolumeTarget_FieldNumber_TargetType = 1,
  PbVolumeTarget_FieldNumber_Duration = 2,
  PbVolumeTarget_FieldNumber_Distance = 3,
  PbVolumeTarget_FieldNumber_Calories = 4,
};

/**
 * products
 **/
@interface PbVolumeTarget : GPBMessage

/** Exercise target type */
@property(nonatomic, readwrite) PbVolumeTarget_PbVolymeTargetType targetType;

@property(nonatomic, readwrite) BOOL hasTargetType;
/** Duration target */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *duration;
/** Test to see if @c duration has been set. */
@property(nonatomic, readwrite) BOOL hasDuration;

/** Distance target */
@property(nonatomic, readwrite) float distance;

@property(nonatomic, readwrite) BOOL hasDistance;
/** Calories target */
@property(nonatomic, readwrite) uint32_t calories;

@property(nonatomic, readwrite) BOOL hasCalories;
@end

#pragma mark - PbStravaSegmentTargets

typedef GPB_ENUM(PbStravaSegmentTargets_FieldNumber) {
  PbStravaSegmentTargets_FieldNumber_OwnBest = 1,
  PbStravaSegmentTargets_FieldNumber_KomQom = 2,
};

@interface PbStravaSegmentTargets : GPBMessage

/** Own best time */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *ownBest;
/** Test to see if @c ownBest has been set. */
@property(nonatomic, readwrite) BOOL hasOwnBest;

/** King or Queen of the Mountain */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *komQom;
/** Test to see if @c komQom has been set. */
@property(nonatomic, readwrite) BOOL hasKomQom;

@end

#pragma mark - PbStravaSegmentTarget

typedef GPB_ENUM(PbStravaSegmentTarget_FieldNumber) {
  PbStravaSegmentTarget_FieldNumber_StravaSegmentType = 1,
  PbStravaSegmentTarget_FieldNumber_StravaSegmentTargets = 2,
};

@interface PbStravaSegmentTarget : GPBMessage

/** SNIPER GUITAR BUGATTI MACAN AMPERA */
@property(nonatomic, readwrite) PbStravaSegmentTarget_PbStravaSegmentType stravaSegmentType;

@property(nonatomic, readwrite) BOOL hasStravaSegmentType;
/** SNIPER GUITAR BUGATTI MACAN AMPERA */
@property(nonatomic, readwrite, strong, null_resettable) PbStravaSegmentTargets *stravaSegmentTargets;
/** Test to see if @c stravaSegmentTargets has been set. */
@property(nonatomic, readwrite) BOOL hasStravaSegmentTargets;

@end

#pragma mark - PbTrainingLoad

typedef GPB_ENUM(PbTrainingLoad_FieldNumber) {
  PbTrainingLoad_FieldNumber_TrainingLoadVal = 1,
  PbTrainingLoad_FieldNumber_RecoveryTime = 2,
  PbTrainingLoad_FieldNumber_CarbohydrateConsumption = 3,
  PbTrainingLoad_FieldNumber_ProteinConsumption = 4,
  PbTrainingLoad_FieldNumber_FatConsumption = 5,
};

@interface PbTrainingLoad : GPBMessage

/** Training load value of the exercise */
@property(nonatomic, readwrite) uint32_t trainingLoadVal;

@property(nonatomic, readwrite) BOOL hasTrainingLoadVal;
/** Recovery time in hours what the exercise caused */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *recoveryTime;
/** Test to see if @c recoveryTime has been set. */
@property(nonatomic, readwrite) BOOL hasRecoveryTime;

/** Carbohydrates consumed during the exercise in percent's */
@property(nonatomic, readwrite) uint32_t carbohydrateConsumption;

@property(nonatomic, readwrite) BOOL hasCarbohydrateConsumption;
/** Proteins consumed during the exercise in percent's */
@property(nonatomic, readwrite) uint32_t proteinConsumption;

@property(nonatomic, readwrite) BOOL hasProteinConsumption;
/** Fats consumed during the exercise in percent's */
@property(nonatomic, readwrite) uint32_t fatConsumption;

@property(nonatomic, readwrite) BOOL hasFatConsumption;
@end

#pragma mark - PbHeartRateZone

typedef GPB_ENUM(PbHeartRateZone_FieldNumber) {
  PbHeartRateZone_FieldNumber_LowerLimit = 1,
  PbHeartRateZone_FieldNumber_HigherLimit = 2,
};

@interface PbHeartRateZone : GPBMessage

/** Heart rate zone lower limit, range [0 -250] 1/min */
@property(nonatomic, readwrite) uint32_t lowerLimit;

@property(nonatomic, readwrite) BOOL hasLowerLimit;
/** Heart rate zone upper limit, range [0 -250] 1/min */
@property(nonatomic, readwrite) uint32_t higherLimit;

@property(nonatomic, readwrite) BOOL hasHigherLimit;
@end

#pragma mark - PbSpeedZone

typedef GPB_ENUM(PbSpeedZone_FieldNumber) {
  PbSpeedZone_FieldNumber_LowerLimit = 1,
  PbSpeedZone_FieldNumber_HigherLimit = 2,
};

@interface PbSpeedZone : GPBMessage

/** Speed zone lower limit, range [0.0 - 399.0] km/h */
@property(nonatomic, readwrite) float lowerLimit;

@property(nonatomic, readwrite) BOOL hasLowerLimit;
/** Speed zone upper limit, range [0.0 - 399.0] km/h */
@property(nonatomic, readwrite) float higherLimit;

@property(nonatomic, readwrite) BOOL hasHigherLimit;
@end

#pragma mark - PbPowerZone

typedef GPB_ENUM(PbPowerZone_FieldNumber) {
  PbPowerZone_FieldNumber_LowerLimit = 1,
  PbPowerZone_FieldNumber_HigherLimit = 2,
};

@interface PbPowerZone : GPBMessage

/** Power zone lower limit, range [0 - 2000] W */
@property(nonatomic, readwrite) uint32_t lowerLimit;

@property(nonatomic, readwrite) BOOL hasLowerLimit;
/** Power zone upper limit, range [0 - 2000] W */
@property(nonatomic, readwrite) uint32_t higherLimit;

@property(nonatomic, readwrite) BOOL hasHigherLimit;
@end

#pragma mark - PbZones

typedef GPB_ENUM(PbZones_FieldNumber) {
  PbZones_FieldNumber_HeartRateZoneArray = 1,
  PbZones_FieldNumber_SpeedZoneArray = 2,
  PbZones_FieldNumber_PowerZoneArray = 3,
  PbZones_FieldNumber_HeartRateSettingSource = 10,
  PbZones_FieldNumber_PowerSettingSource = 11,
  PbZones_FieldNumber_SpeedSettingSource = 12,
};

@interface PbZones : GPBMessage

/** GUITAR BUGATTI MACAN AMPERA MCLAREN RANGER ACE ARCHER SNIPER AVALON ASTRA VECTRA AUSTIN MASERATI ALPINA VESPER OCTOPUS METRO */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbHeartRateZone*> *heartRateZoneArray;
/** The number of items in @c heartRateZoneArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger heartRateZoneArray_Count;

/** GUITAR BUGATTI MACAN AMPERA MCLAREN RANGER ACE ARCHER SNIPER AVALON AUSTIN MASERATI METRO */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbSpeedZone*> *speedZoneArray;
/** The number of items in @c speedZoneArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger speedZoneArray_Count;

/** GUITAR BUGATTI MACAN AMPERA MCLAREN ARCHER SNIPER METRO */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbPowerZone*> *powerZoneArray;
/** The number of items in @c powerZoneArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger powerZoneArray_Count;

/** GUITAR BUGATTI MACAN AMPERA MCLAREN RANGER ACE ARCHER SNIPER AVALON ASTRA VECTRA AUSTIN MASERATI ALPINA VESPER OCTOPUS METRO */
@property(nonatomic, readwrite) enum PbHeartRateZoneSettingSource heartRateSettingSource;

@property(nonatomic, readwrite) BOOL hasHeartRateSettingSource;
/** GUITAR BUGATTI MACAN AMPERA MCLAREN ARCHER SNIPER METRO */
@property(nonatomic, readwrite) enum PbPowerZoneSettingSource powerSettingSource;

@property(nonatomic, readwrite) BOOL hasPowerSettingSource;
/** GUITAR BUGATTI MACAN AMPERA ACE RANGER ARCHER SNIPER AUSTIN MASERATI METRO */
@property(nonatomic, readwrite) enum PbSpeedZoneSettingSource speedSettingSource;

@property(nonatomic, readwrite) BOOL hasSpeedSettingSource;
@end

#pragma mark - PbBleMac

typedef GPB_ENUM(PbBleMac_FieldNumber) {
  PbBleMac_FieldNumber_Mac = 1,
  PbBleMac_FieldNumber_Type = 2,
};

@interface PbBleMac : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *mac;
/** Test to see if @c mac has been set. */
@property(nonatomic, readwrite) BOOL hasMac;

@property(nonatomic, readwrite) enum PbMacType type;

@property(nonatomic, readwrite) BOOL hasType;
@end

#pragma mark - PbBleDeviceName

typedef GPB_ENUM(PbBleDeviceName_FieldNumber) {
  PbBleDeviceName_FieldNumber_Name = 1,
};

@interface PbBleDeviceName : GPBMessage

/** Advertising name or name from DIS */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

@end

#pragma mark - PbDeviceId

typedef GPB_ENUM(PbDeviceId_FieldNumber) {
  PbDeviceId_FieldNumber_DeviceId = 1,
};

@interface PbDeviceId : GPBMessage

/** Used only with Polar devices */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceId;
/** Test to see if @c deviceId has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceId;

@end

#pragma mark - PbRunningIndex

typedef GPB_ENUM(PbRunningIndex_FieldNumber) {
  PbRunningIndex_FieldNumber_Value = 1,
  PbRunningIndex_FieldNumber_CalculationTime = 2,
};

@interface PbRunningIndex : GPBMessage

/**
 * Running Index
 * range [25 - 100] ml/kg/min
 **/
@property(nonatomic, readwrite) uint32_t value;

@property(nonatomic, readwrite) BOOL hasValue;
/** Time duration from exercise start to moment when index is calculated */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *calculationTime;
/** Test to see if @c calculationTime has been set. */
@property(nonatomic, readwrite) BOOL hasCalculationTime;

@end

#pragma mark - PbSportIdentifier

typedef GPB_ENUM(PbSportIdentifier_FieldNumber) {
  PbSportIdentifier_FieldNumber_Value = 1,
};

@interface PbSportIdentifier : GPBMessage

/**
 * Sport identifier
 * range [1 - xxx]
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
@end

#pragma mark - PbOneLineText

typedef GPB_ENUM(PbOneLineText_FieldNumber) {
  PbOneLineText_FieldNumber_Text = 1,
};

@interface PbOneLineText : GPBMessage

/**
 * Text/name/etc meant to be printed in one line
 * Max size is 45 UTF-8 characters excluding line end / null!
 * Also note the max size is 45 characters, not bytes!
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - PbMultiLineText

typedef GPB_ENUM(PbMultiLineText_FieldNumber) {
  PbMultiLineText_FieldNumber_Text = 1,
};

@interface PbMultiLineText : GPBMessage

/**
 * Text/name/etc meant to be printed on multiple lines
 * Maximum size is 1024. (nanopb).max_size definition removed due to ESW memory limits
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@end

#pragma mark - PbLanguageId

typedef GPB_ENUM(PbLanguageId_FieldNumber) {
  PbLanguageId_FieldNumber_Language = 1,
};

@interface PbLanguageId : GPBMessage

/**
 * Two-letter lower case language code.
 * See http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;
/** Test to see if @c language has been set. */
@property(nonatomic, readwrite) BOOL hasLanguage;

@end

#pragma mark - PbTrainingSessionTargetId

typedef GPB_ENUM(PbTrainingSessionTargetId_FieldNumber) {
  PbTrainingSessionTargetId_FieldNumber_Value = 1,
  PbTrainingSessionTargetId_FieldNumber_LastModified = 2,
};

@interface PbTrainingSessionTargetId : GPBMessage

/**
 * Ecosystem training session target identifier
 *
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
/** Last modified timestamp from the referenced training session target */
@property(nonatomic, readwrite, strong, null_resettable) PbSystemDateTime *lastModified;
/** Test to see if @c lastModified has been set. */
@property(nonatomic, readwrite) BOOL hasLastModified;

@end

#pragma mark - PbTrainingSessionFavoriteId

typedef GPB_ENUM(PbTrainingSessionFavoriteId_FieldNumber) {
  PbTrainingSessionFavoriteId_FieldNumber_Value = 1,
  PbTrainingSessionFavoriteId_FieldNumber_LastModified = 2,
};

@interface PbTrainingSessionFavoriteId : GPBMessage

/**
 * Ecosystem training session favorite identifier
 *
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
/** Last modified timestamp from the referenced favorite training session target */
@property(nonatomic, readwrite, strong, null_resettable) PbSystemDateTime *lastModified;
/** Test to see if @c lastModified has been set. */
@property(nonatomic, readwrite) BOOL hasLastModified;

@end

#pragma mark - PbRouteId

typedef GPB_ENUM(PbRouteId_FieldNumber) {
  PbRouteId_FieldNumber_Value = 1,
};

@interface PbRouteId : GPBMessage

/**
 * Ecosystem route identifier
 *
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
@end

#pragma mark - PbSwimmingPoolInfo

typedef GPB_ENUM(PbSwimmingPoolInfo_FieldNumber) {
  PbSwimmingPoolInfo_FieldNumber_PoolLength = 1,
  PbSwimmingPoolInfo_FieldNumber_SwimmingPoolType = 2,
};

@interface PbSwimmingPoolInfo : GPBMessage

/** Swimming pool length in meters */
@property(nonatomic, readwrite) float poolLength;

@property(nonatomic, readwrite) BOOL hasPoolLength;
/** Swimming pool type used */
@property(nonatomic, readwrite) enum PbSwimmingPoolUnits swimmingPoolType;

@property(nonatomic, readwrite) BOOL hasSwimmingPoolType;
@end

#pragma mark - PbTrainingProgramId

typedef GPB_ENUM(PbTrainingProgramId_FieldNumber) {
  PbTrainingProgramId_FieldNumber_Value = 1,
};

@interface PbTrainingProgramId : GPBMessage

/**
 * Ecosystem training program identifier
 *
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
@end

#pragma mark - PbEventId

typedef GPB_ENUM(PbEventId_FieldNumber) {
  PbEventId_FieldNumber_Value = 1,
};

@interface PbEventId : GPBMessage

/**
 * Ecosystem event identifier
 *
 **/
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
@end

#pragma mark - PbPauseTime

typedef GPB_ENUM(PbPauseTime_FieldNumber) {
  PbPauseTime_FieldNumber_StartTime = 1,
  PbPauseTime_FieldNumber_Duration = 2,
};

@interface PbPauseTime : GPBMessage

/**
 * Offset from the beginning of the exercise
 * Snapshot of exercise duration which does not include pause times
 *   Exercise 12:00-12:10, two pauses: at 12:02-12:05 and 12:06-12:07.
 *   Exercise duration is 6min
 *   Pause times:
 *   1. start _time 02:00 duration 03:00
 *   2. start_time 03:00 duration 01:00
 **/
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *startTime;
/** Test to see if @c startTime has been set. */
@property(nonatomic, readwrite) BOOL hasStartTime;

/** Duration of the pause period */
@property(nonatomic, readwrite, strong, null_resettable) PbDuration *duration;
/** Test to see if @c duration has been set. */
@property(nonatomic, readwrite) BOOL hasDuration;

@end

#pragma mark - PbApplicationId

typedef GPB_ENUM(PbApplicationId_FieldNumber) {
  PbApplicationId_FieldNumber_Value = 1,
};

@interface PbApplicationId : GPBMessage

/** Ecosystem application identifier */
@property(nonatomic, readwrite) uint64_t value;

@property(nonatomic, readwrite) BOOL hasValue;
@end

#pragma mark - PbVersion

typedef GPB_ENUM(PbVersion_FieldNumber) {
  PbVersion_FieldNumber_Major = 1,
  PbVersion_FieldNumber_Minor = 2,
  PbVersion_FieldNumber_Patch = 3,
  PbVersion_FieldNumber_Specifier = 4,
};

@interface PbVersion : GPBMessage

/** range: 0-255 */
@property(nonatomic, readwrite) uint32_t major;

@property(nonatomic, readwrite) BOOL hasMajor;
/** range: 0-255 */
@property(nonatomic, readwrite) uint32_t minor;

@property(nonatomic, readwrite) BOOL hasMinor;
/** range: 0-65535 */
@property(nonatomic, readwrite) uint32_t patch;

@property(nonatomic, readwrite) BOOL hasPatch;
/** ALL_TC */
@property(nonatomic, readwrite, copy, null_resettable) NSString *specifier;
/** Test to see if @c specifier has been set. */
@property(nonatomic, readwrite) BOOL hasSpecifier;

@end

#pragma mark - PbSubcomponentInfo

typedef GPB_ENUM(PbSubcomponentInfo_FieldNumber) {
  PbSubcomponentInfo_FieldNumber_Name = 1,
  PbSubcomponentInfo_FieldNumber_ObsoleteRequiredVersion = 2,
  PbSubcomponentInfo_FieldNumber_Version = 3,
};

@interface PbSubcomponentInfo : GPBMessage

/** The name of the component. For example "BleBootloader". Use unique names. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/** The version that this main processor firmware requires for this sub component */
@property(nonatomic, readwrite, strong, null_resettable) PbVersion *obsoleteRequiredVersion;
/** Test to see if @c obsoleteRequiredVersion has been set. */
@property(nonatomic, readwrite) BOOL hasObsoleteRequiredVersion;

/** The version this sub component has now. 0.0.0 means error. */
@property(nonatomic, readwrite, strong, null_resettable) PbVersion *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;

@end

#pragma mark - PbBleUuid

typedef GPB_ENUM(PbBleUuid_FieldNumber) {
  PbBleUuid_FieldNumber_Uuid = 1,
};

@interface PbBleUuid : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@end

#pragma mark - PbBleCharacteristic

typedef GPB_ENUM(PbBleCharacteristic_FieldNumber) {
  PbBleCharacteristic_FieldNumber_Handle = 1,
  PbBleCharacteristic_FieldNumber_Type = 2,
};

@interface PbBleCharacteristic : GPBMessage

/** Should be uint16 but there is no such type? */
@property(nonatomic, readwrite) uint32_t handle;

@property(nonatomic, readwrite) BOOL hasHandle;
@property(nonatomic, readwrite, strong, null_resettable) PbBleUuid *type;
/** Test to see if @c type has been set. */
@property(nonatomic, readwrite) BOOL hasType;

@end

#pragma mark - PbBleService

typedef GPB_ENUM(PbBleService_FieldNumber) {
  PbBleService_FieldNumber_ServiceUuid = 1,
  PbBleService_FieldNumber_CharacteristicsArray = 2,
};

@interface PbBleService : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PbBleUuid *serviceUuid;
/** Test to see if @c serviceUuid has been set. */
@property(nonatomic, readwrite) BOOL hasServiceUuid;

/** ALL_TC */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PbBleCharacteristic*> *characteristicsArray;
/** The number of items in @c characteristicsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger characteristicsArray_Count;

@end

#pragma mark - PbSourceDevice

typedef GPB_ENUM(PbSourceDevice_FieldNumber) {
  PbSourceDevice_FieldNumber_Name = 1,
  PbSourceDevice_FieldNumber_Manufacturer = 2,
  PbSourceDevice_FieldNumber_ModelNumber = 3,
  PbSourceDevice_FieldNumber_HardwareCode = 4,
  PbSourceDevice_FieldNumber_PlatformVersion = 5,
  PbSourceDevice_FieldNumber_SoftwareVersion = 6,
  PbSourceDevice_FieldNumber_PolarmathsmartVersion = 7,
  PbSourceDevice_FieldNumber_Collector = 8,
};

/**
 *
 * Metadata for identifying the source of a data
 *
 * Each field must be set in the case the value is available.
 *
 * If no suitable data is available for the only required field (i.e. no way to name the device),
 * then there's obviously no need to create this source message.
 **/
@interface PbSourceDevice : GPBMessage

/**
 * Name of the device or app which has produced the data
 *
 * Polar device: Device name (e.g. "Polar V800 12345678", "Polar H10 87654321")
 * Mobile app: Application name (e.g. "Polar Flow Android", "Polar Beat iOS")
 * 3rd party device: Device name (first value that is available):
 * 1) Device name from GAP (e.g "Stryd")
 * 2) Manufacturer + model_number (e.g. "Stryd 2")
 * 3) Just manufacturer (e.g. "Stryd")
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/** Test to see if @c name has been set. */
@property(nonatomic, readwrite) BOOL hasName;

/**
 * Device or app manufacturer
 *
 * Polar device and mobile app: "Polar Electro Oy"
 * 3rd party device: Manufacturer from DIS if available (e.g. "Stryd")
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *manufacturer;
/** Test to see if @c manufacturer has been set. */
@property(nonatomic, readwrite) BOOL hasManufacturer;

/**
 * Device model number
 *
 * Polar device: "V800", "H10", ...
 * Mobile app: "SM-G925F", "MQ7E2", ...
 * 3rd party device: Model number from DIS if available (e.g. "2")
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *modelNumber;
/** Test to see if @c modelNumber has been set. */
@property(nonatomic, readwrite) BOOL hasModelNumber;

/**
 * Device hardware code
 *
 * Polar device: hardware_code in device.proto (e.g. 00853923.01)
 * Mobile app: Always absent
 * 3rd party device: Hardware revision from DIS if available
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *hardwareCode;
/** Test to see if @c hardwareCode has been set. */
@property(nonatomic, readwrite) BOOL hasHardwareCode;

/**
 * Device platform version
 *
 * Polar device: platform_version in device.proto
 * Mobile app: OS version
 * 3rd party device: Firmware revision from DIS if available
 **/
@property(nonatomic, readwrite, strong, null_resettable) PbVersion *platformVersion;
/** Test to see if @c platformVersion has been set. */
@property(nonatomic, readwrite) BOOL hasPlatformVersion;

/**
 * Device firmware version
 *
 * Polar device: device_version in device.proto
 * Mobile app: Application version
 * 3rd party device: Software version from DIS if available
 **/
@property(nonatomic, readwrite, strong, null_resettable) PbVersion *softwareVersion;
/** Test to see if @c softwareVersion has been set. */
@property(nonatomic, readwrite) BOOL hasSoftwareVersion;

/**
 * Polar Math Smart version
 *
 * Polar devices: polarmathsmart_version in device.proto
 * Mobile app: Polar Math Smart version
 * 3rd party device: Always absent
 **/
@property(nonatomic, readwrite, strong, null_resettable) PbVersion *polarmathsmartVersion;
/** Test to see if @c polarmathsmartVersion has been set. */
@property(nonatomic, readwrite) BOOL hasPolarmathsmartVersion;

/**
 * Data collector
 *
 * This field is set only if the source device is an exernal sensor.
 * Collector is the device (or app) that connects to the sensor and
 * creates the data this PbSourceDevice is for.
 *
 * E.g. If the source of HR data is OH1, then the collector here
 * could be e.g. Polar Beat
 **/
@property(nonatomic, readwrite, strong, null_resettable) PbSourceDevice *collector;
/** Test to see if @c collector has been set. */
@property(nonatomic, readwrite) BOOL hasCollector;

@end

#pragma mark - PbSampleSourceDevice

typedef GPB_ENUM(PbSampleSourceDevice_FieldNumber) {
  PbSampleSourceDevice_FieldNumber_StartIndex = 1,
  PbSampleSourceDevice_FieldNumber_SourceDevice = 2,
};

@interface PbSampleSourceDevice : GPBMessage

/**
 * On a sample array merged from multiple sources, this is the start index for
 * samples that have been produced by the device described by source_device.
 * The subsequence of samples produced by the source implicitly ends where the
 * next starts (or at the end of the sample array).
 **/
@property(nonatomic, readwrite) uint32_t startIndex;

@property(nonatomic, readwrite) BOOL hasStartIndex;
/** Source device */
@property(nonatomic, readwrite, strong, null_resettable) PbSourceDevice *sourceDevice;
/** Test to see if @c sourceDevice has been set. */
@property(nonatomic, readwrite) BOOL hasSourceDevice;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
