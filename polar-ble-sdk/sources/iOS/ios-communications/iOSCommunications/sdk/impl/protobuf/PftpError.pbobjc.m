// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pftp_error.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "PftpError.pbobjc.h"
 #import "Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PftpErrorRoot

@implementation PftpErrorRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[TypesRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - Enum PbPFtpError

GPBEnumDescriptor *PbPFtpError_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "OperationSucceeded\000Rebooting\000TryAgain\000Un"
        "identifiedHostError\000InvalidCommand\000Inval"
        "idParameter\000NoSuchFileOrDirectory\000Direct"
        "oryExists\000FileExists\000OperationNotPermitt"
        "ed\000NoSuchUser\000Timeout\000UnidentifiedDevice"
        "Error\000NotImplemented\000SystemBusy\000InvalidC"
        "ontent\000ChecksumFailure\000DiskFull\000Prerequi"
        "siteNotMet\000InsufficientBuffer\000WaitForIdl"
        "ing\000BatteryTooLow\000";
    static const int32_t values[] = {
        PbPFtpError_OperationSucceeded,
        PbPFtpError_Rebooting,
        PbPFtpError_TryAgain,
        PbPFtpError_UnidentifiedHostError,
        PbPFtpError_InvalidCommand,
        PbPFtpError_InvalidParameter,
        PbPFtpError_NoSuchFileOrDirectory,
        PbPFtpError_DirectoryExists,
        PbPFtpError_FileExists,
        PbPFtpError_OperationNotPermitted,
        PbPFtpError_NoSuchUser,
        PbPFtpError_Timeout,
        PbPFtpError_UnidentifiedDeviceError,
        PbPFtpError_NotImplemented,
        PbPFtpError_SystemBusy,
        PbPFtpError_InvalidContent,
        PbPFtpError_ChecksumFailure,
        PbPFtpError_DiskFull,
        PbPFtpError_PrerequisiteNotMet,
        PbPFtpError_InsufficientBuffer,
        PbPFtpError_WaitForIdling,
        PbPFtpError_BatteryTooLow,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PbPFtpError)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PbPFtpError_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PbPFtpError_IsValidValue(int32_t value__) {
  switch (value__) {
    case PbPFtpError_OperationSucceeded:
    case PbPFtpError_Rebooting:
    case PbPFtpError_TryAgain:
    case PbPFtpError_UnidentifiedHostError:
    case PbPFtpError_InvalidCommand:
    case PbPFtpError_InvalidParameter:
    case PbPFtpError_NoSuchFileOrDirectory:
    case PbPFtpError_DirectoryExists:
    case PbPFtpError_FileExists:
    case PbPFtpError_OperationNotPermitted:
    case PbPFtpError_NoSuchUser:
    case PbPFtpError_Timeout:
    case PbPFtpError_UnidentifiedDeviceError:
    case PbPFtpError_NotImplemented:
    case PbPFtpError_SystemBusy:
    case PbPFtpError_InvalidContent:
    case PbPFtpError_ChecksumFailure:
    case PbPFtpError_DiskFull:
    case PbPFtpError_PrerequisiteNotMet:
    case PbPFtpError_InsufficientBuffer:
    case PbPFtpError_WaitForIdling:
    case PbPFtpError_BatteryTooLow:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
