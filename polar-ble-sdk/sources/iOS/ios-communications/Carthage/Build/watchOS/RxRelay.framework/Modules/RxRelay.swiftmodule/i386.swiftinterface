// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-watchos3.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RxRelay
import Foundation
import RxSwift
import Swift
final public class PublishRelay<Element> : RxSwift.ObservableType {
  final public func accept(_ event: Element)
  public init()
  final public func subscribe<Observer>(_ observer: Observer) -> RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  final public func asObservable() -> RxSwift.Observable<Element>
  @objc deinit
}
final public class BehaviorRelay<Element> : RxSwift.ObservableType {
  final public func accept(_ event: Element)
  final public var value: Element {
    get
  }
  public init(value: Element)
  final public func subscribe<Observer>(_ observer: Observer) -> RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  final public func asObservable() -> RxSwift.Observable<Element>
  @objc deinit
}
extension ObservableType {
  public func bind(to relays: RxRelay.PublishRelay<Self.Element>...) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.PublishRelay<Self.Element?>...) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element>...) -> RxSwift.Disposable
  public func bind(to relays: RxRelay.BehaviorRelay<Self.Element?>...) -> RxSwift.Disposable
}
