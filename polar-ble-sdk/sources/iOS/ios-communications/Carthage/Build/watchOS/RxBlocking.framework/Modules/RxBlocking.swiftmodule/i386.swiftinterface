// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-watchos3.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RxBlocking
import CoreFoundation
import Darwin
import Foundation
import Foundation/*.NSCopying*/
import Foundation/*.NSLock*/
import Foundation/*.NSRecursiveLock*/
import Foundation/*.Thread*/
import RxSwift
import Swift
public struct BlockingObservable<Element> {
}
public enum MaterializedSequenceResult<T> {
  case completed(elements: [T])
  case failed(elements: [T], error: Swift.Error)
}
extension BlockingObservable {
  public func toArray() throws -> [Element]
}
extension BlockingObservable {
  public func first() throws -> Element?
}
extension BlockingObservable {
  public func last() throws -> Element?
}
extension BlockingObservable {
  public func single() throws -> Element
  public func single(_ predicate: @escaping (Element) throws -> Swift.Bool) throws -> Element
}
extension BlockingObservable {
  public func materialize() -> RxBlocking.MaterializedSequenceResult<Element>
}
extension ObservableConvertibleType {
  public func toBlocking(timeout: Foundation.TimeInterval? = nil) -> RxBlocking.BlockingObservable<Self.Element>
}
